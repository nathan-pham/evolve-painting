{
  "version": 3,
  "sources": ["../../build/js/index.js", "../../build/js/libs/math.js", "../../build/js/libs/evolution/Polygon.js", "../../build/js/utils.js", "../../build/js/libs/canvas.js", "../../build/js/libs/evolution/Population.js", "../../build/js/libs/evolution/PopulationManager.js", "../../build/js/components/modal.js", "../../build/js/components/input.js"],
  "sourcesContent": ["import \"https://cdn.jsdelivr.net/npm/ionicons/dist/ionicons/ionicons.esm.js\"\r\nimport PopulationManger from \"./libs/evolution/PopulationManager.js\"\r\n\r\nimport { resolution, download, load, fit } from \"./libs/canvas.js\"\r\nimport { modalComponent } from \"./components/modal.js\"\r\nimport { inputComponent } from \"./components/input.js\"\r\nimport { h, $ } from \"./utils.js\"\r\n\r\nlet GLOBAL_STATE = {\r\n    SOURCE_PATH: \"/js/libs/evolution/mona-lisa.jpg\",\r\n    RESOLUTION_FACTOR: 1, // increase for more detail but much less speed\r\n    POLYGON_COUNT: 50,\r\n    VERTICE_COUNT: 6,\r\n    EV_ID: 0\r\n}\r\n\r\nconst main = async () => {\r\n    const [sourceCanvas, resultCanvas] = $(\"canvas\")\r\n    const settingsButton = $(\"#settings\")[0]\r\n    const evolveButton = $(\"#evolve\")[0]\r\n\r\n    const dimensions = {\r\n        width: sourceCanvas.offsetWidth * GLOBAL_STATE.RESOLUTION_FACTOR,\r\n        height: sourceCanvas.offsetWidth * GLOBAL_STATE.RESOLUTION_FACTOR\r\n    }\r\n    resolution(sourceCanvas, dimensions, GLOBAL_STATE.RESOLUTION_FACTOR)\r\n    resolution(resultCanvas, dimensions, GLOBAL_STATE.RESOLUTION_FACTOR)\r\n\r\n    fit(sourceCanvas, await load(GLOBAL_STATE.SOURCE_PATH), GLOBAL_STATE.RESOLUTION_FACTOR)\r\n\r\n    let populationManager = new PopulationManger({ \r\n        dimensions, \r\n        polygonCount: GLOBAL_STATE.POLYGON_COUNT, \r\n        verticeCount: GLOBAL_STATE.VERTICE_COUNT \r\n    })\r\n\r\n    const sourceCtx = sourceCanvas.getContext(\"2d\")\r\n    const resultCtx = resultCanvas.getContext(\"2d\")\r\n\r\n    let source = sourceCtx.getImageData(0, 0, dimensions.width, dimensions.height)\r\n    let modal\r\n\r\n    settingsButton.onclick = () => {\r\n        modal = modalComponent(\"Settings\",\r\n            h(\"p\", {}, `Changing settings will reset evolution.`),\r\n            h(\"p\", { id: \"statistics\" }, \"Start evolution to see statistics.\"),\r\n            h(\"input\", { placeholder: \"/js/libs/evolution/mona-lisa.jpg\", value: GLOBAL_STATE.SOURCE_PATH, type: \"text\" }),\r\n            \r\n            inputComponent(`${GLOBAL_STATE.POLYGON_COUNT}/1000 Polygons`, { min: 10, max: 1000, value: GLOBAL_STATE.POLYGON_COUNT, name: \"polygons\", onChange: (e) => e.target.parentNode.querySelector(\"label\").textContent = `${e.target.value}/1000 Polygons`}),\r\n\r\n            inputComponent(`${GLOBAL_STATE.VERTICE_COUNT}/100 Vertices`, { min: 3, max: 100,  value: GLOBAL_STATE.VERTICE_COUNT, name: \"vertices\", onChange: (e) => e.target.parentNode.querySelector(\"label\").textContent = `${e.target.value}/100 Vertices` }),\r\n            \r\n            h(\"div\", { className: \"options\" },\r\n                h(\"button\", { className: \"secondary\", onClick: () => {\r\n                    download(dimensions.width, populationManager.population.polygons)\r\n                }}, \"Download Image\"),\r\n                h(\"button\", { onClick: async () => {\r\n                    const [path, polygons, vertices] = modal.querySelectorAll(\"input\")\r\n                    const NEW_SOURCE_PATH = path.value\r\n\r\n                    fit(sourceCanvas, await load(NEW_SOURCE_PATH), GLOBAL_STATE.RESOLUTION_FACTOR)\r\n                    source = sourceCtx.getImageData(0, 0, dimensions.width, dimensions.height)\r\n\r\n                    GLOBAL_STATE = {\r\n                        ...GLOBAL_STATE,\r\n                        SOURCE_PATH: NEW_SOURCE_PATH,\r\n                        POLYGON_COUNT: parseInt(polygons.value),\r\n                        VERTICE_COUNT: parseInt(vertices.value),\r\n                    }\r\n                    \r\n                    populationManager = new PopulationManger({ \r\n                        dimensions, \r\n                        polygonCount: GLOBAL_STATE.POLYGON_COUNT, \r\n                        verticeCount: GLOBAL_STATE.VERTICE_COUNT \r\n                    })\r\n\r\n                    if(evolveButton.textContent.toLowerCase().includes(\"start\")) {\r\n                        clearInterval(GLOBAL_STATE.EV_ID)\r\n                    }\r\n\r\n                    modal.querySelector(\".icon\").click()\r\n                    modal = null\r\n                }}, \"Save Settings\"),\r\n            )\r\n        )\r\n\r\n        document.body.appendChild(modal)\r\n    }\r\n\r\n    evolveButton.onclick = () => {\r\n        if(evolveButton.textContent.toLowerCase().includes(\"start\")) {\r\n            evolveButton.textContent = \"Stop Evolving\"\r\n            GLOBAL_STATE.EV_ID = setInterval(() => {\r\n                populationManager.core(resultCtx, source)\r\n\r\n                if(modal && document.body.contains(modal)) {\r\n                    document.getElementById(\"statistics\").textContent = `mutations: ${populationManager.mutations}, improvements: ${populationManager.improvements}, fitness: ${populationManager.normalizedFitness.toFixed(2)}%`\r\n                }\r\n            }, 0)\r\n        } else {\r\n            evolveButton.textContent = \"Start Evolving\"\r\n            clearInterval(GLOBAL_STATE.EV_ID)\r\n        }\r\n    }\r\n}\r\n\r\nmain()", "export const map = (n, inMin, inMax, outMin, outMax) => (\r\n    (n - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\r\n)\r\n\r\nexport const dist = (x1, y1, x2, y2) => (\r\n    Math.sqrt(\r\n        Math.pow(x2 - x1, 2) +\r\n        Math.pow(y2 - y1, 2)\r\n    )\r\n)\r\n\r\nexport const random = (min, max) => (\r\n    !max ? Math.random() * min : Math.random() * (max - min) + min\r\n)\r\n\r\nexport const randInt = (max) => Math.round(random(max))\r\n\r\nexport const constrain = (n, min, max) => (\r\n    n < min\r\n        ? min\r\n        : n > max\r\n            ? max\r\n            : n\r\n)", "import { randInt } from \"../math.js\"\r\n\r\nexport default class Polygon {\r\n    vertices = []\r\n    color = { r: 0, g: 0, b: 0, a: 0 }\r\n\r\n    constructor(dimensions, verticeCount, dnaMode) {\r\n        if(verticeCount && dnaMode) {\r\n            for(let i = 0; i < verticeCount; i++) {\r\n                this.vertices.push([randInt(dimensions.width), randInt(dimensions.height)])\r\n            }\r\n    \r\n            switch(dnaMode) {\r\n                case \"black\":\r\n                    this.color = { r: 0, g: 0, b: 0, a: 0.001 }\r\n                    break\r\n                case \"white\":\r\n                    this.color = { r: 255, g: 255, b: 255, a: 0.001 }\r\n                    break\r\n                default:\r\n                    this.color = { r: random(255), g: random(255), b: random(255), a: 0.001 }\r\n            }\r\n        }\r\n    }\r\n\r\n    render(ctx) {\r\n        ctx.fillStyle = `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.color.a})`\r\n        ctx.beginPath()\r\n    \r\n        const [genesisX, genesisY] = this.vertices[0]\r\n        ctx.moveTo(genesisX, genesisY)\r\n        for(const vertice of this.vertices.slice(1)) {\r\n            ctx.lineTo(vertice[0], vertice[1])\r\n        }\r\n        \r\n        ctx.closePath()\r\n        ctx.fill()\r\n    }\r\n}\r\n", "export const h = (tagName=\"div\", attributes={}, ...children) => {\r\n    const element = document.createElement(tagName)\r\n\r\n    for(const [key, value] of Object.entries(attributes)) {\r\n        if(key.startsWith(\"on\")) {\r\n            element.addEventListener(key.substring(2).toLowerCase(), value)\r\n        } else if (key == \"className\") {\r\n            element.className = value\r\n        } else {\r\n            element.setAttribute(key, value)\r\n        }\r\n    }\r\n\r\n    for(const child of children) {\r\n        element.appendChild(\r\n            typeof child == \"string\"\r\n                ? document.createTextNode(child)\r\n                : child\r\n        )\r\n    }\r\n\r\n    return element\r\n}\r\n\r\nexport const $ = (initial, selector) => {\r\n    return typeof initial == \"string\" && !selector \r\n        ? document.querySelectorAll(initial)\r\n        : initial.querySelectorAll(selector)\r\n}", "import { h } from \"../utils.js\"\r\n\r\nexport const resolution = (canvas, dimensions, RESOLUTION_FACTOR) => {\r\n    const reduce = (obj, alter) => (\r\n        Object.keys(obj).reduce((acc, cur) => ({\r\n            ...acc,\r\n            [cur]: alter(obj[cur]) // + \"px\"\r\n        }), {})\r\n    )\r\n\r\n    const scale = window.devicePixelRatio || 1\r\n    const ctx = canvas.getContext(\"2d\")\r\n\r\n    Object.assign(canvas, reduce(dimensions, (cur) => Math.floor(cur * scale)))\r\n    Object.assign(canvas.style, reduce(dimensions, (cur) => cur / RESOLUTION_FACTOR + \"px\"))\r\n    ctx.scale(scale, scale)\r\n}\r\n\r\nexport const load = async (path) => (\r\n    new Promise((resolve, reject) => {\r\n        const img = new Image()\r\n\r\n        img.crossOrigin = \"Anonymous\"\r\n        img.onload = () => resolve(img)\r\n        img.onerror = async () => {\r\n            console.log(\"failed to load image, using mona lisa instead\")\r\n            resolve(await load(\"/js/libs/evolution/mona-lisa.jpg\"))\r\n        }\r\n        img.src = path\r\n    })\r\n)\r\n\r\nexport const fit = (canvas, image, RESOLUTION_FACTOR) => {\r\n    const ctx = canvas.getContext(\"2d\")\r\n    const ratio = image.width / image.height\r\n    \r\n    const canvasWidth = parseInt(canvas.style.width) * RESOLUTION_FACTOR\r\n    const canvasHeight = parseInt(canvas.style.height) * RESOLUTION_FACTOR\r\n\r\n    let newWidth = canvasWidth\r\n    let newHeight = newWidth / ratio\r\n\r\n    if (newHeight < canvasHeight) {\r\n        newHeight = canvasHeight\r\n        newWidth = newHeight * ratio\r\n    }\r\n\r\n    const xOffset = newWidth > canvasWidth ? (canvasWidth - newWidth) / 2 : 0\r\n    const yOffset = newHeight > canvasHeight ? (canvasHeight - newHeight) / 2 : 0\r\n\r\n    ctx.fillStyle = \"rgb(255, 255, 255)\"\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight)\r\n    ctx.drawImage(image, xOffset, yOffset, newWidth, newHeight)\r\n}\r\n\r\nexport const download = (realSize, polygons) => {\r\n    let targetSize = 1024\r\n    let scale = targetSize / realSize\r\n\r\n    const canvas = h(\"canvas\", { width: targetSize, height: targetSize })\r\n    const ctx = canvas.getContext(\"2d\")\r\n\r\n    ctx.fillStyle = \"rgb(255, 255, 255)\"\r\n    ctx.fillRect(0, 0, targetSize, targetSize)\r\n\r\n    for(const polygon of polygons) {\r\n        ctx.fillStyle = `rgba(${polygon.color.r}, ${polygon.color.g}, ${polygon.color.b}, ${polygon.color.a})`\r\n        ctx.beginPath()\r\n\r\n        const [genesisX, genesisY] = polygon.vertices[0]\r\n        ctx.moveTo(genesisX * scale, genesisY * scale)\r\n        for(const vertice of polygon.vertices.slice(1)) {\r\n            ctx.lineTo(vertice[0] * scale, vertice[1] * scale)\r\n        }\r\n        \r\n        ctx.closePath()\r\n        ctx.fill()\r\n    }\r\n\r\n    h(\"a\", { style: \"display: none\", download: \"image-evolution.png\", href: canvas.toDataURL(\"image/png\") }).click()\r\n}", "import Polygon from \"./Polygon.js\"\r\n\r\nimport { random, randInt } from \"../math.js\"\r\nimport { resolution } from \"../canvas.js\"\r\n\r\nexport default class Population {\r\n    dimensions = {}\r\n    polygons = []\r\n    fitness = -1\r\n\r\n    constructor(dimensions, polygonCount, verticeCount, dnaMode) {\r\n        this.dimensions = dimensions\r\n\r\n        if(Array.isArray(polygonCount)) {\r\n            this.polygons = polygonCount\r\n            this.fitness = verticeCount\r\n        } else {\r\n            for(let i = 0; i < polygonCount; i++) {\r\n                this.polygons.push(new Polygon(this.dimensions, verticeCount, dnaMode))\r\n            }\r\n        }\r\n\r\n        const canvas = document.createElement(\"canvas\")\r\n        resolution(canvas, this.dimensions)\r\n\r\n        this.testCtx = canvas.getContext(\"2d\")\r\n    }\r\n\r\n    render(ctx) {\r\n        ctx.fillStyle = \"rgb(255, 255, 255)\"\r\n        ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height)\r\n\r\n        for(const polygon of this.polygons) {\r\n            polygon.render(ctx)\r\n        }\r\n    }\r\n    \r\n    clone() {\r\n        let polygons = []\r\n\r\n        for(let polygon of this.polygons) {\r\n            let polygonClone = new Polygon(this.dimensions)\r\n\r\n            Object.assign(polygonClone, {\r\n                color: {...polygon.color},\r\n                vertices: polygon.vertices.reduce((acc, cur) => [...acc, [...cur]], [])\r\n            })\r\n\r\n            polygons.push(polygonClone)\r\n        }\r\n\r\n        return new Population(this.dimensions, [...polygons], this.fitness)\r\n    }\r\n\r\n    mutate(mutationMode) {\r\n        let i = Math.floor(random(this.polygons.length))\r\n        let polygon = this.polygons[i]\r\n\r\n        switch(mutationMode) {\r\n            case \"medium\": {\r\n                const roulette = random(2)\r\n                    \r\n                if(roulette < 1) {\r\n                    if(roulette < 0.25) {\r\n                        polygon.color.r = randInt(255)\r\n                    } else if(roulette < 0.5) {\r\n                        polygon.color.g = randInt(255)\r\n                    } else if(roulette < 0.75) {\r\n                        polygon.color.b = randInt(255)\r\n                    } else if(roulette < 1) {\r\n                        polygon.color.a = Math.random()\r\n                    }\r\n                } else {\r\n                    let vertexIndex = Math.floor(random(this.polygons[0].vertices.length))                \r\n                    \r\n                    if(roulette < 1.5) {\r\n                        polygon.vertices[vertexIndex][0] = randInt(this.dimensions.width)\r\n                    } else {\r\n                        polygon.vertices[vertexIndex][1] = randInt(this.dimensions.height)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.polygons[i] = polygon\r\n    }\r\n\r\n    calculateFitness(source) {\r\n        let fitness = 0\r\n\r\n        this.testCtx.fillStyle = \"rgb(255, 255, 255)\"\r\n        this.testCtx.fillRect(0, 0, this.dimensions.width, this.dimensions.height)\r\n        this.render(this.testCtx)\r\n\r\n        const result = this.testCtx.getImageData(0, 0, this.dimensions.width, this.dimensions.height)\r\n\r\n        for (let i = 0; i < source.data.length; i++) {\r\n            if(i % 4 != 3) {\r\n                fitness += Math.abs(source.data[i] - result.data[i])\r\n            }\r\n\r\n            // depth = 4\r\n            // diff += Math.abs(source.data[4 * i + 0] - result.data[4 * i + 0]) / 255;\r\n            // diff += Math.abs(source.data[4 * i + 1] - result.data[4 * i + 1]) / 255;\r\n            // diff += Math.abs(source.data[4 * i + 2] - result.data[4 * i + 2]) / 255;\r\n        }\r\n\r\n        return fitness\r\n    }\r\n}", "import Population from \"./Population.js\"\r\n\r\nexport default class PopulationManager {\r\n    mutationMode = 0.05\r\n    verticeCount = 4\r\n    dimensions = {}\r\n\r\n    mutations = 0\r\n    improvements = 0\r\n    normalizedFitness = 0\r\n\r\n    bestFitness = Infinity\r\n    bestPopulation = {}\r\n\r\n    constructor({ dimensions, polygonCount=50, verticeCount=6, mutationMode=\"medium\", dnaMode=\"black\" }) {\r\n        this.mutationMode = mutationMode\r\n        this.dimensions = dimensions\r\n        this.population = new Population(dimensions, polygonCount, verticeCount, dnaMode)\r\n    }\r\n\r\n    core(ctx, source) {\r\n        this.population.mutate(this.mutationMode)\r\n        this.mutations++\r\n\r\n        this.population.fitness = this.population.calculateFitness(source)\r\n\r\n        const NORM_COEF = this.dimensions.width * this.dimensions.height * 3 * 255\r\n\r\n        if(this.population.fitness < this.bestFitness) {\r\n            this.bestFitness = this.population.fitness\r\n            this.bestPopulation = this.population.clone()\r\n            this.improvements++\r\n            this.normalizedFitness = 100 * (1 - this.bestFitness / NORM_COEF)\r\n            this.bestPopulation.render(ctx)\r\n        } else {\r\n            this.population = this.bestPopulation.clone()\r\n        }\r\n    }\r\n}", "import { h } from \"../utils.js\"\r\n\r\nexport const modalComponent = (title, ...children) => {\r\n    const modal = h(\"div\", { className: \"modal-wrapper\" },\r\n        h(\"div\", { className: \"modal\" },\r\n            h(\"div\", { className: \"icon\", onClick: () => {\r\n                modal.remove()\r\n                document.body.style.overflow = ''\r\n            }},\r\n                h(\"ion-icon\", { name: \"close-outline\" })\r\n            ),\r\n            h(\"h1\", {}, title || \"modal\"),\r\n            ...children\r\n        )\r\n    )\r\n\r\n    document.body.style.overflow = \"hidden\"\r\n\r\n    return modal\r\n}", "import { h } from \"../utils.js\"\r\n\r\nexport const inputComponent = (title=\"unnamed-input\", props) => {\r\n    const input = h(\"div\", { className: \"input-wrapper\" }, \r\n        h(\"input\", { type: \"range\", ...props }),\r\n        h(\"label\", { for: props.name || props.id || \"unnamed-input\" }, title)\r\n    )\r\n\r\n    return input\r\n}"],
  "mappings": "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",
  "names": []
}
